//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Numerics;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace BlockM3.AEternity.SDK.Generated.Models
{
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Pow : System.Collections.ObjectModel.Collection<uint>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class KeyBlock 
    {
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public ulong Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("prev_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PrevHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("prev_key_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PrevKeyHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("miner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Miner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("beneficiary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Beneficiary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Always)]
        public uint Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pow Pow { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        public ulong Time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public uint Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Info { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MicroBlockHeader 
    {
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public ulong Height { get; set; }
    
        /// <summary>"no_fraud" | api encoded Proof of Fraud hash</summary>
        [Newtonsoft.Json.JsonProperty("pof_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PofHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("prev_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PrevHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("prev_key_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PrevKeyHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("txs_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TXsHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signature", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Signature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        public ulong Time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public uint Version { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class KeyBlockOrMicroBlockHeader 
    {
        [Newtonsoft.Json.JsonProperty("key_block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KeyBlock KeyBlock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("micro_block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MicroBlockHeader MicroBlock { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GenericTxs 
    {
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<GenericSignedTx> Transactions { get; set; } = new System.Collections.ObjectModel.Collection<GenericSignedTx>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Account 
    {
        /// <summary>Public key</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Balance</summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Balance { get; set; }
    
        /// <summary>Nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
        /// <summary>Payable</summary>
        [Newtonsoft.Json.JsonProperty("payable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Payable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountKind? Kind { get; set; }
    
        /// <summary>Id of authorization contract for generalized account</summary>
        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractId { get; set; }
    
        /// <summary>Name of authorization function for generalized account</summary>
        [Newtonsoft.Json.JsonProperty("auth_fun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthFun { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Tx 
    {
        [Newtonsoft.Json.JsonProperty("tx", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TX { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RegisteredOracle 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query_format", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QueryFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response_format", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponseFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query_fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger QueryFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Always)]
        public ulong Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleQuery 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sender_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SenderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sender_nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong SenderNonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oracle_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OracleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Response { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Always)]
        public ulong Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TTL ResponseTtl { get; set; } = new TTL();
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleQueries 
    {
        [Newtonsoft.Json.JsonProperty("oracle_queries", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OracleQuery> OracleQueriesCollection { get; set; } = new System.Collections.ObjectModel.Collection<OracleQuery>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpendTx 
    {
        [Newtonsoft.Json.JsonProperty("recipient_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipientId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sender_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SenderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleRegisterTx 
    {
        [Newtonsoft.Json.JsonProperty("query_format", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QueryFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response_format", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponseFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query_fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger QueryFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oracle_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TTL OracleTtl { get; set; } = new TTL();
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ushort? AbiVersion { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleExtendTx 
    {
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oracle_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RelativeTTL OracleTtl { get; set; } = new RelativeTTL();
    
        [Newtonsoft.Json.JsonProperty("oracle_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OracleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleQueryTx 
    {
        [Newtonsoft.Json.JsonProperty("oracle_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OracleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query_fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger QueryFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TTL QueryTtl { get; set; } = new TTL();
    
        [Newtonsoft.Json.JsonProperty("response_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RelativeTTL ResponseTtl { get; set; } = new RelativeTTL();
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sender_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SenderId { get; set; }
    
        /// <summary>Sender nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleRespondTx 
    {
        [Newtonsoft.Json.JsonProperty("query_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QueryId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Response { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RelativeTTL ResponseTtl { get; set; } = new RelativeTTL();
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oracle_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OracleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TTL 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TTLType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public ulong Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RelativeTTL 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RelativeTTLType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public ulong Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameEntry 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Always)]
        public ulong Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pointers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NamePointer> Pointers { get; set; } = new System.Collections.ObjectModel.Collection<NamePointer>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NamePreclaimTx 
    {
        [Newtonsoft.Json.JsonProperty("commitment_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CommitmentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameClaimTx 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name_salt", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger NameSalt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name_fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? NameFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameUpdateTx 
    {
        [Newtonsoft.Json.JsonProperty("name_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name_ttl", Required = Newtonsoft.Json.Required.Always)]
        public ulong NameTtl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pointers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NamePointer> Pointers { get; set; } = new System.Collections.ObjectModel.Collection<NamePointer>();
    
        [Newtonsoft.Json.JsonProperty("client_ttl", Required = Newtonsoft.Json.Required.Always)]
        public ulong ClientTtl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameTransferTx 
    {
        [Newtonsoft.Json.JsonProperty("name_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recipient_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipientId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameRevokeTx 
    {
        [Newtonsoft.Json.JsonProperty("name_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CommitmentId 
    {
        [Newtonsoft.Json.JsonProperty("commitment_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CommitmentID { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameHash 
    {
        [Newtonsoft.Json.JsonProperty("name_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NamePointer 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Channel 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initiator_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitiatorId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channel_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ChannelAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initiator_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger InitiatorAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ResponderAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channel_reserve", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ChannelReserve { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delegate_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> DelegateIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Always)]
        public ulong Round { get; set; }
    
        [Newtonsoft.Json.JsonProperty("solo_round", Required = Newtonsoft.Json.Required.Always)]
        public ulong SoloRound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lock_period", Required = Newtonsoft.Json.Required.Always)]
        public ulong LockPeriod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locked_until", Required = Newtonsoft.Json.Required.Always)]
        public ulong LockedUntil { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelCreateTx 
    {
        [Newtonsoft.Json.JsonProperty("initiator_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitiatorId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initiator_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger InitiatorAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ResponderAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("push_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger PushAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channel_reserve", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ChannelReserve { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lock_period", Required = Newtonsoft.Json.Required.Always)]
        public ulong LockPeriod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Root hash of the channel's internal state tree</summary>
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delegate_ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DelegateIds { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelDepositTx 
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
        /// <summary>Root hash of the channel's internal state tree after the deposit had been applied to it</summary>
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        /// <summary>Channel's next round</summary>
        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Always)]
        public ulong Round { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelWithdrawTx 
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("to_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
        /// <summary>Root hash of the channel's internal state tree after the withdraw had been applied to it</summary>
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        /// <summary>Channel's next round</summary>
        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Always)]
        public ulong Round { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelForceProgressTx 
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
        /// <summary>Channel's next round</summary>
        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Always)]
        public ulong Round { get; set; }
    
        /// <summary>Update to be applied. Must be a OffChainCallContract</summary>
        [Newtonsoft.Json.JsonProperty("update", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OffChainUpdate Update { get; set; } = new OffChainUpdate();
    
        /// <summary>Channel's next state_hash</summary>
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>The whole set of off-chain state trees</summary>
        [Newtonsoft.Json.JsonProperty("offchain_trees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OffchainTrees { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelCloseMutualTx 
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initiator_amount_final", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger InitiatorAmountFinal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_amount_final", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ResponderAmountFinal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public ulong Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelCloseSoloTx 
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Proof of inclusion containing information for closing the channel</summary>
        [Newtonsoft.Json.JsonProperty("poi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Poi { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelSlashTx 
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Proof of inclusion containing information for closing the channel</summary>
        [Newtonsoft.Json.JsonProperty("poi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Poi { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelSettleTx 
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initiator_amount_final", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger InitiatorAmountFinal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_amount_final", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ResponderAmountFinal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelSnapshotSoloTx 
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PeerPubKey 
    {
        [Newtonsoft.Json.JsonProperty("pubkey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Pubkey { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PubKey 
    {
        [Newtonsoft.Json.JsonProperty("pub_key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PublicKey { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Status 
    {
        [Newtonsoft.Json.JsonProperty("genesis_key_block_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GenesisKeyBlockHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("solutions", Required = Newtonsoft.Json.Required.Always)]
        public ulong Solutions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("difficulty", Required = Newtonsoft.Json.Required.Always)]
        public ulong Difficulty { get; set; }
    
        [Newtonsoft.Json.JsonProperty("syncing", Required = Newtonsoft.Json.Required.Always)]
        public bool Syncing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sync_progress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 100.0D)]
        public double? SyncProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listening", Required = Newtonsoft.Json.Required.Always)]
        public bool Listening { get; set; }
    
        [Newtonsoft.Json.JsonProperty("protocols", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Protocol> Protocols { get; set; } = new System.Collections.ObjectModel.Collection<Protocol>();
    
        [Newtonsoft.Json.JsonProperty("node_version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NodeVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("node_revision", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NodeRevision { get; set; }
    
        [Newtonsoft.Json.JsonProperty("peer_count", Required = Newtonsoft.Json.Required.Always)]
        public uint PeerCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pending_transactions_count", Required = Newtonsoft.Json.Required.Always)]
        public uint PendingTransactionsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("network_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetworkId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("peer_pubkey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PeerPubkey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("top_key_block_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TopKeyBlockHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("top_block_height", Required = Newtonsoft.Json.Required.Always)]
        public ulong TopBlockHeight { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Protocol 
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public uint Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("effective_at_height", Required = Newtonsoft.Json.Required.Always)]
        public ulong EffectiveAtHeight { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GenericSignedTx 
    {
        [Newtonsoft.Json.JsonProperty("tx", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GenericTx TX { get; set; } = new GenericTx();
    
        [Newtonsoft.Json.JsonProperty("block_height", Required = Newtonsoft.Json.Required.Always)]
        public long BlockHeight { get; set; }
    
        /// <summary>Value "none" means no block in the chain includes the transaction</summary>
        [Newtonsoft.Json.JsonProperty("block_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BlockHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash { get; set; }
    
        /// <summary>At least one signature is required unless for Generalized Account Meta transactions</summary>
        [Newtonsoft.Json.JsonProperty("signatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Signatures { get; set; }
    
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("ChannelCreateTxJSON", typeof(ChannelCreateTxJSON))]
    [JsonInheritanceAttribute("ChannelDepositTxJSON", typeof(ChannelDepositTxJSON))]
    [JsonInheritanceAttribute("ChannelWithdrawalTxJSON", typeof(ChannelWithdrawalTxJSON))]
    [JsonInheritanceAttribute("ChannelForceProgressTxJSON", typeof(ChannelForceProgressTxJSON))]
    [JsonInheritanceAttribute("ChannelCloseMutualTxJSON", typeof(ChannelCloseMutualTxJSON))]
    [JsonInheritanceAttribute("ChannelCloseSoloTxJSON", typeof(ChannelCloseSoloTxJSON))]
    [JsonInheritanceAttribute("ChannelSlashTxJSON", typeof(ChannelSlashTxJSON))]
    [JsonInheritanceAttribute("ChannelSettleTxJSON", typeof(ChannelSettleTxJSON))]
    [JsonInheritanceAttribute("ChannelSnapshotSoloTxJSON", typeof(ChannelSnapshotSoloTxJSON))]
    [JsonInheritanceAttribute("SpendTxJSON", typeof(SpendTxJSON))]
    [JsonInheritanceAttribute("OracleRegisterTxJSON", typeof(OracleRegisterTxJSON))]
    [JsonInheritanceAttribute("OracleExtendTxJSON", typeof(OracleExtendTxJSON))]
    [JsonInheritanceAttribute("OracleQueryTxJSON", typeof(OracleQueryTxJSON))]
    [JsonInheritanceAttribute("OracleResponseTxJSON", typeof(OracleResponseTxJSON))]
    [JsonInheritanceAttribute("NamePreclaimTxJSON", typeof(NamePreclaimTxJSON))]
    [JsonInheritanceAttribute("NameClaimTxJSON", typeof(NameClaimTxJSON))]
    [JsonInheritanceAttribute("NameUpdateTxJSON", typeof(NameUpdateTxJSON))]
    [JsonInheritanceAttribute("NameTransferTxJSON", typeof(NameTransferTxJSON))]
    [JsonInheritanceAttribute("NameRevokeTxJSON", typeof(NameRevokeTxJSON))]
    [JsonInheritanceAttribute("ContractCreateTxJSON", typeof(ContractCreateTxJSON))]
    [JsonInheritanceAttribute("ContractCallTxJSON", typeof(ContractCallTxJSON))]
    [JsonInheritanceAttribute("GAAttachTxJSON", typeof(GAAttachTxJSON))]
    [JsonInheritanceAttribute("GAMetaTxJSON", typeof(GAMetaTxJSON))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GenericTx 
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public uint Version { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelCreateTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("initiator_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitiatorId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initiator_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger InitiatorAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ResponderAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("push_amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger PushAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channel_reserve", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ChannelReserve { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lock_period", Required = Newtonsoft.Json.Required.Always)]
        public ulong LockPeriod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Root hash of the channel's internal state tree</summary>
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delegate_ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DelegateIds { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelDepositTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
        /// <summary>Root hash of the channel's internal state tree after the deposit had been applied to it</summary>
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        /// <summary>Channel's next round</summary>
        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Always)]
        public ulong Round { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelWithdrawalTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("to_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
        /// <summary>Root hash of the channel's internal state tree after the withdraw had been applied to it</summary>
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        /// <summary>Channel's next round</summary>
        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Always)]
        public ulong Round { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelForceProgressTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
        /// <summary>Channel's next round</summary>
        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Always)]
        public ulong Round { get; set; }
    
        /// <summary>Update to be applied. Must be a OffChainCallContract</summary>
        [Newtonsoft.Json.JsonProperty("update", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OffChainUpdate Update { get; set; } = new OffChainUpdate();
    
        /// <summary>Channel's next state_hash</summary>
        [Newtonsoft.Json.JsonProperty("state_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateHash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>The whole set of off-chain state trees</summary>
        [Newtonsoft.Json.JsonProperty("offchain_trees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OffchainTrees { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelCloseMutualTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initiator_amount_final", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger InitiatorAmountFinal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_amount_final", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ResponderAmountFinal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public ulong Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelCloseSoloTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Proof of inclusion containing information for closing the channel</summary>
        [Newtonsoft.Json.JsonProperty("poi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Poi { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelSlashTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Proof of inclusion containing information for closing the channel</summary>
        [Newtonsoft.Json.JsonProperty("poi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Poi { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelSettleTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initiator_amount_final", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger InitiatorAmountFinal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responder_amount_final", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger ResponderAmountFinal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChannelSnapshotSoloTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("channel_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpendTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("recipient_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipientId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sender_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SenderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payload { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleRegisterTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("query_format", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QueryFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response_format", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponseFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query_fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger QueryFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oracle_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TTL OracleTtl { get; set; } = new TTL();
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ushort? AbiVersion { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleExtendTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oracle_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RelativeTTL OracleTtl { get; set; } = new RelativeTTL();
    
        [Newtonsoft.Json.JsonProperty("oracle_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OracleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleQueryTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("oracle_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OracleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query_fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger QueryFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("query_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TTL QueryTtl { get; set; } = new TTL();
    
        [Newtonsoft.Json.JsonProperty("response_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RelativeTTL ResponseTtl { get; set; } = new RelativeTTL();
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sender_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SenderId { get; set; }
    
        /// <summary>Sender nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OracleResponseTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("query_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QueryId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Response { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response_ttl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RelativeTTL ResponseTtl { get; set; } = new RelativeTTL();
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oracle_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OracleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NamePreclaimTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("commitment_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CommitmentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameClaimTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name_salt", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger NameSalt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name_fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? NameFee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameUpdateTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("name_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name_ttl", Required = Newtonsoft.Json.Required.Always)]
        public ulong NameTtl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pointers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NamePointer> Pointers { get; set; } = new System.Collections.ObjectModel.Collection<NamePointer>();
    
        [Newtonsoft.Json.JsonProperty("client_ttl", Required = Newtonsoft.Json.Required.Always)]
        public ulong ClientTtl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameTransferTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("name_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recipient_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipientId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NameRevokeTxJSON : GenericTx
    {
        [Newtonsoft.Json.JsonProperty("name_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractCreateTxJSON : GenericTx
    {
        /// <summary>Contract owner pub_key</summary>
        [Newtonsoft.Json.JsonProperty("owner_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OwnerId { get; set; }
    
        /// <summary>Owner's nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Contract's code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        /// <summary>Virtual machine's version</summary>
        [Newtonsoft.Json.JsonProperty("vm_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort VmVersion { get; set; }
    
        /// <summary>ABI version</summary>
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Deposit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        /// <summary>Contract call data</summary>
        [Newtonsoft.Json.JsonProperty("call_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractCallTxJSON : GenericTx
    {
        /// <summary>Contract caller pub_key</summary>
        [Newtonsoft.Json.JsonProperty("caller_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallerId { get; set; }
    
        /// <summary>Caller's nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Contract's pub_key</summary>
        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; set; }
    
        /// <summary>ABI version</summary>
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        /// <summary>Contract call data</summary>
        [Newtonsoft.Json.JsonProperty("call_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GAAttachTxJSON : GenericTx
    {
        /// <summary>Contract owner pub_key</summary>
        [Newtonsoft.Json.JsonProperty("owner_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OwnerId { get; set; }
    
        /// <summary>Owner's nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Contract's code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        /// <summary>Virtual machine's version</summary>
        [Newtonsoft.Json.JsonProperty("vm_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort VmVersion { get; set; }
    
        /// <summary>ABI version</summary>
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        /// <summary>Contract call data</summary>
        [Newtonsoft.Json.JsonProperty("call_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
        /// <summary>Contract authorization function hash (hex encoded)</summary>
        [Newtonsoft.Json.JsonProperty("auth_fun", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(0x|0X)?[a-fA-F0-9]+$'")]
        public string AuthFun { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GAMetaTxJSON : GenericTx
    {
        /// <summary>Account owner pub_key</summary>
        [Newtonsoft.Json.JsonProperty("ga_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GaId { get; set; }
    
        /// <summary>ABI version</summary>
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        /// <summary>Contract authorization function call data</summary>
        [Newtonsoft.Json.JsonProperty("auth_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AuthData { get; set; }
    
        /// <summary>Enclosed signed transaction</summary>
        [Newtonsoft.Json.JsonProperty("tx", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GenericSignedTx TX { get; set; } = new GenericSignedTx();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TxInfoObject 
    {
        [Newtonsoft.Json.JsonProperty("call_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractCallObject CallInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ga_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GAObject GaInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tx_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TXInfo { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractCallObject 
    {
        [Newtonsoft.Json.JsonProperty("caller_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caller_nonce", Required = Newtonsoft.Json.Required.Always)]
        public ulong CallerNonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public ulong Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_used", Required = Newtonsoft.Json.Required.Always)]
        public ulong GasUsed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("log", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Event> Log { get; set; } = new System.Collections.ObjectModel.Collection<Event>();
    
        [Newtonsoft.Json.JsonProperty("return_value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnValue { get; set; }
    
        /// <summary>The status of the call 'ok | error | revert'.</summary>
        [Newtonsoft.Json.JsonProperty("return_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GAObject 
    {
        [Newtonsoft.Json.JsonProperty("caller_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public ulong Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_used", Required = Newtonsoft.Json.Required.Always)]
        public ulong GasUsed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("return_value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnValue { get; set; }
    
        /// <summary>The status of the call 'ok | error'.</summary>
        [Newtonsoft.Json.JsonProperty("return_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReturnType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inner_object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TxInfoObject InnerObject { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Event 
    {
        /// <summary>Contract address</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }
    
        /// <summary>Event topics</summary>
        [Newtonsoft.Json.JsonProperty("topics", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BigInteger> Topics { get; set; } = new System.Collections.ObjectModel.Collection<BigInteger>();
    
        /// <summary>Log event data (as contract byte array).</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Error 
    {
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reason { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractObject 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("owner_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OwnerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vm_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort VmVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referrer_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ReferrerIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Always)]
        public ulong Deposit { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractStore 
    {
        [Newtonsoft.Json.JsonProperty("store", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Store> Store { get; set; } = new System.Collections.ObjectModel.Collection<Store>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ByteCode 
    {
        [Newtonsoft.Json.JsonProperty("bytecode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Bytecode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DryRunInput 
    {
        [Newtonsoft.Json.JsonProperty("top", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Top { get; set; }
    
        /// <summary>Accounts</summary>
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DryRunAccount> Accounts { get; set; }
    
        /// <summary>Txs</summary>
        [Newtonsoft.Json.JsonProperty("txs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DryRunInputItem> TXs { get; set; } = new System.Collections.ObjectModel.Collection<DryRunInputItem>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DryRunInputItem 
    {
        [Newtonsoft.Json.JsonProperty("tx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TX { get; set; }
    
        [Newtonsoft.Json.JsonProperty("call_req", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DryRunCallReq CallReq { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DryRunCallReq 
    {
        [Newtonsoft.Json.JsonProperty("calldata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contract", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contract { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caller", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Caller { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ushort? AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DryRunCallContext Context { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DryRunCallContext 
    {
        [Newtonsoft.Json.JsonProperty("tx_hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TXHash { get; set; }
    
        /// <summary>This call will have effects on the next call in this dry-run (or not)</summary>
        [Newtonsoft.Json.JsonProperty("stateful", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Stateful { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DryRunAccount 
    {
        [Newtonsoft.Json.JsonProperty("pub_key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PublicKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DryRunResults 
    {
        /// <summary>results</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DryRunResult> Results { get; set; } = new System.Collections.ObjectModel.Collection<DryRunResult>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DryRunResult 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Result { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("call_obj", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractCallObject CallObj { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Peers 
    {
        /// <summary>All discovered peers</summary>
        [Newtonsoft.Json.JsonProperty("peers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> PeersCollection { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>All blocked peers</summary>
        [Newtonsoft.Json.JsonProperty("blocked", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Blocked { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractCreateTx 
    {
        /// <summary>Contract owner pub_key</summary>
        [Newtonsoft.Json.JsonProperty("owner_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OwnerId { get; set; }
    
        /// <summary>Owner's nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Contract's code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        /// <summary>Virtual machine's version</summary>
        [Newtonsoft.Json.JsonProperty("vm_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort VmVersion { get; set; }
    
        /// <summary>ABI version</summary>
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Deposit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        /// <summary>Contract call data</summary>
        [Newtonsoft.Json.JsonProperty("call_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractCallTx 
    {
        /// <summary>Contract caller pub_key</summary>
        [Newtonsoft.Json.JsonProperty("caller_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallerId { get; set; }
    
        /// <summary>Caller's nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Contract's pub_key</summary>
        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; set; }
    
        /// <summary>ABI version</summary>
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        /// <summary>Contract call data</summary>
        [Newtonsoft.Json.JsonProperty("call_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UnsignedTx 
    {
        /// <summary>Unsigned transaction object</summary>
        [Newtonsoft.Json.JsonProperty("tx", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TX { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostTxResponse 
    {
        /// <summary>Hash of a signed transaction</summary>
        [Newtonsoft.Json.JsonProperty("tx_hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TXHash { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateContractUnsignedTx : UnsignedTx
    {
        /// <summary>Address of the contract to be created</summary>
        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PoI 
    {
        /// <summary>Proof of inclusion</summary>
        [Newtonsoft.Json.JsonProperty("poi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Poi { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Generation 
    {
        [Newtonsoft.Json.JsonProperty("key_block", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyBlock KeyBlock { get; set; } = new KeyBlock();
    
        [Newtonsoft.Json.JsonProperty("micro_blocks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MicroBlocks { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "op")]
    [JsonInheritanceAttribute("OffChainTransfer", typeof(OffChainTransfer))]
    [JsonInheritanceAttribute("OffChainWithdrawal", typeof(OffChainWithdrawal))]
    [JsonInheritanceAttribute("OffChainDeposit", typeof(OffChainDeposit))]
    [JsonInheritanceAttribute("OffChainNewContract", typeof(OffChainNewContract))]
    [JsonInheritanceAttribute("OffChainCallContract", typeof(OffChainCallContract))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OffChainUpdate 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OffChainTransfer : OffChainUpdate
    {
        /// <summary>Sender of tokens</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; }
    
        /// <summary>Receiver of tokens</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OffChainWithdrawal : OffChainUpdate
    {
        /// <summary>Withdrawer of tokens</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OffChainDeposit : OffChainUpdate
    {
        /// <summary>Depositor of tokens</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OffChainNewContract : OffChainUpdate
    {
        /// <summary>Contract owner</summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vm_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort VmVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ByteCode Code { get; set; } = new ByteCode();
    
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Deposit { get; set; }
    
        /// <summary>Contract call data</summary>
        [Newtonsoft.Json.JsonProperty("call_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OffChainCallContract : OffChainUpdate
    {
        /// <summary>Contract caller</summary>
        [Newtonsoft.Json.JsonProperty("caller", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Caller { get; set; }
    
        /// <summary>Contract address</summary>
        [Newtonsoft.Json.JsonProperty("contract", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contract { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        /// <summary>Contract call data</summary>
        [Newtonsoft.Json.JsonProperty("call_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TokenSupply 
    {
        /// <summary>Tokens in account balances</summary>
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? Accounts { get; set; }
    
        /// <summary>Tokens in contracts</summary>
        [Newtonsoft.Json.JsonProperty("contracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? Contracts { get; set; }
    
        /// <summary>Tokens in contracts registered as oracles</summary>
        [Newtonsoft.Json.JsonProperty("contract_oracles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? ContractOracles { get; set; }
    
        /// <summary>Tokens locked (not owned by anyone)</summary>
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? Locked { get; set; }
    
        /// <summary>Tokens in accounts registered as oracles</summary>
        [Newtonsoft.Json.JsonProperty("oracles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? Oracles { get; set; }
    
        /// <summary>Tokens in pending oracle queries</summary>
        [Newtonsoft.Json.JsonProperty("oracle_queries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? OracleQueriesCollection { get; set; }
    
        /// <summary>Tokens from fees and coinbase pending in the beneficiary reward delay</summary>
        [Newtonsoft.Json.JsonProperty("pending_rewards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? PendingRewards { get; set; }
    
        /// <summary>Sum of all tokens from other fields</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BigInteger? Total { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GAAttachTx 
    {
        /// <summary>Contract owner pub_key</summary>
        [Newtonsoft.Json.JsonProperty("owner_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OwnerId { get; set; }
    
        /// <summary>Owner's nonce</summary>
        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Nonce { get; set; }
    
        /// <summary>Contract's code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        /// <summary>Virtual machine's version</summary>
        [Newtonsoft.Json.JsonProperty("vm_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort VmVersion { get; set; }
    
        /// <summary>ABI version</summary>
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        /// <summary>Contract call data</summary>
        [Newtonsoft.Json.JsonProperty("call_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallData { get; set; }
    
        /// <summary>Contract authorization function hash (hex encoded)</summary>
        [Newtonsoft.Json.JsonProperty("auth_fun", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(0x|0X)?[a-fA-F0-9]+$'")]
        public string AuthFun { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GAMetaTx 
    {
        /// <summary>Account owner pub_key</summary>
        [Newtonsoft.Json.JsonProperty("ga_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GaId { get; set; }
    
        /// <summary>ABI version</summary>
        [Newtonsoft.Json.JsonProperty("abi_version", Required = Newtonsoft.Json.Required.Always)]
        public ushort AbiVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas", Required = Newtonsoft.Json.Required.Always)]
        public ulong Gas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gas_price", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger GasPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Always)]
        public BigInteger Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Ttl { get; set; }
    
        /// <summary>Contract authorization function call data</summary>
        [Newtonsoft.Json.JsonProperty("auth_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AuthData { get; set; }
    
        /// <summary>Enclosed signed transaction</summary>
        [Newtonsoft.Json.JsonProperty("tx", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GenericSignedTx TX { get; set; } = new GenericSignedTx();
    
    
    }
    
    /// <summary>The type of a query: open, closed or all</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response2 
    {
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong? Height { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response3 
    {
        /// <summary>Count</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public uint? Count { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AccountKind
    {
        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"generalized")]
        Generalized = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TTLType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delta")]
        Delta = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RelativeTTLType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delta")]
        Delta = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Store 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v9.0.0.0)")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
    
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;
    
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
           
            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminator))
            {
                jObject.Remove(_discriminator);
            }
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }
    
            return objectType;
        }
    
        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }
    
            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108